{"ast":null,"code":"var _jsxFileName = \"/Users/kraewind/Documents/Flatiron/Phase 5/this-is-now/this-is-now-frontend/src/containers/Login.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { fetchUser } from '../actions/fetchUser';\nimport { Redirect } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Navbar from \"../components/Navbar\";\nimport fetchActivities from '../actions/fetchActivities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: '',\n      password: ''\n    };\n\n    this.handleOnLogin = e => {\n      e.preventDefault();\n      this.props.fetchUser(this.state.username, this.state.password);\n      this.setState({\n        username: '',\n        password: ''\n      });\n    };\n\n    this.handleUsernameChange = e => {\n      this.setState({\n        username: e.target.value,\n        password: this.state.password\n      });\n    };\n\n    this.handlePasswordChange = e => {\n      this.setState({\n        username: this.state.username,\n        password: e.target.value\n      });\n    };\n  }\n\n  //logic here is that when I login, the page re-renders because of change to store. After that, I will have user data but nothing else, in which case I should fetch the other data. If, however, I go to the login page\n  render() {\n    if (!!sessionStorage.getItem('token') && this.props.scores.length === 0) {\n      this.props.fetchActivities(sessionStorage.getItem('token'));\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        push: true,\n        to: `/users/${sessionStorage.getItem('username')}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }, this);\n    } else if (!!sessionStorage.getItem('token') && this.props.scores.length > 0) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        push: true,\n        to: `/users/${sessionStorage.getItem('username')}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: e => this.handleOnLogin(e),\n        style: {\n          backgroundColor: 'white',\n          borderWidth: '5px',\n          borderColor: '#aaaaaa',\n          borderStyle: 'solid',\n          position: 'absolute',\n          left: '50%',\n          top: '30%',\n          transform: 'translate(-50%, -50%)'\n        },\n        className: \"LogIn\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"formBasicUsername\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Username   \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            size: \"lg\",\n            value: this.state.username,\n            onChange: e => this.handleUsernameChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"formBasicPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password   \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            size: \"lg\",\n            type: \"password\",\n            value: this.state.password,\n            onChange: e => this.handlePasswordChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchUser: (UN, PW) => dispatch(fetchUser(UN, PW)),\n    fetchActivities: token => dispatch(fetchActivities(token))\n  };\n} //Left token in there so that page re-renders to redirect\n\n\nfunction mapState(currentState) {\n  return {\n    token: currentState.user.token,\n    scores: currentState.scores.scores\n  };\n}\n\nexport default connect(mapState, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/Users/kraewind/Documents/Flatiron/Phase 5/this-is-now/this-is-now-frontend/src/containers/Login.js"],"names":["React","Component","connect","fetchUser","Redirect","Form","Button","Navbar","fetchActivities","Login","state","username","password","handleOnLogin","e","preventDefault","props","setState","handleUsernameChange","target","value","handlePasswordChange","render","sessionStorage","getItem","scores","length","backgroundColor","borderWidth","borderColor","borderStyle","position","left","top","transform","mapDispatchToProps","dispatch","UN","PW","token","mapState","currentState","user"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAAUC,QAAV,QAA0B,kBAA1B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,eAAP,MAA4B,4BAA5B;;;;AAGA,MAAMC,KAAN,SAAoBR,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC1BS,KAD0B,GAClB;AACJC,MAAAA,QAAQ,EAAE,EADN;AAEJC,MAAAA,QAAQ,EAAE;AAFN,KADkB;;AAAA,SAM5BC,aAN4B,GAMXC,CAAD,IAAO;AACrBA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKC,KAAL,CAAWb,SAAX,CAAqB,KAAKO,KAAL,CAAWC,QAAhC,EAA0C,KAAKD,KAAL,CAAWE,QAArD;AACA,WAAKK,QAAL,CAAc;AACVN,QAAAA,QAAQ,EAAE,EADA;AAEVC,QAAAA,QAAQ,EAAE;AAFA,OAAd;AAID,KAb2B;;AAAA,SAe5BM,oBAf4B,GAeJJ,CAAD,IAAO;AAC1B,WAAKG,QAAL,CAAc;AACVN,QAAAA,QAAQ,EAAEG,CAAC,CAACK,MAAF,CAASC,KADT;AAEVR,QAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE;AAFX,OAAd;AAIH,KApB2B;;AAAA,SAsB5BS,oBAtB4B,GAsBJP,CAAD,IAAO;AAC5B,WAAKG,QAAL,CAAc;AACVN,QAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QADX;AAEVC,QAAAA,QAAQ,EAAEE,CAAC,CAACK,MAAF,CAASC;AAFT,OAAd;AAID,KA3B2B;AAAA;;AA6B9B;AACAE,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,CAACC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAF,IAAqC,KAAKR,KAAL,CAAWS,MAAX,CAAkBC,MAAlB,KAA6B,CAAtE,EAAyE;AACvE,WAAKV,KAAL,CAAWR,eAAX,CAA2Be,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAA3B;AACA,0BAAO,QAAC,QAAD;AAAU,QAAA,IAAI,MAAd;AAAe,QAAA,EAAE,EAAG,UAASD,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAmC;AAAhE;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAHD,MAGM,IAAG,CAAC,CAACD,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAF,IAAqC,KAAKR,KAAL,CAAWS,MAAX,CAAkBC,MAAlB,GAA2B,CAAnE,EAAqE;AACzE,0BAAO,QAAC,QAAD;AAAU,QAAA,IAAI,MAAd;AAAe,QAAA,EAAE,EAAG,UAASH,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAmC;AAAhE;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,wBACF;AAAA,8BACA,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,IAAD;AAAO,QAAA,QAAQ,EAAGV,CAAD,IAAO,KAAKD,aAAL,CAAmBC,CAAnB,CAAxB;AACE,QAAA,KAAK,EAAE;AACDa,UAAAA,eAAe,EAAE,OADhB;AAEDC,UAAAA,WAAW,EAAE,KAFZ;AAGDC,UAAAA,WAAW,EAAC,SAHX;AAIDC,UAAAA,WAAW,EAAC,OAJX;AAKDC,UAAAA,QAAQ,EAAE,UALT;AAKqBC,UAAAA,IAAI,EAAE,KAL3B;AAKkCC,UAAAA,GAAG,EAAE,KALvC;AAMDC,UAAAA,SAAS,EAAE;AANV,SADT;AAQU,QAAA,SAAS,EAAC,OARpB;AAAA,gCASgB,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,MAAtB;AAA6B,UAAA,SAAS,EAAC,mBAAvC;AAAA,kCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,YAAA,IAAI,EAAC,IAAnB;AAAyB,YAAA,KAAK,EAAE,KAAKxB,KAAL,CAAWC,QAA3C;AAAqD,YAAA,QAAQ,EAAGG,CAAD,IAAO,KAAKI,oBAAL,CAA0BJ,CAA1B;AAAtE;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAThB,eAcgB,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,MAAtB;AAA6B,UAAA,SAAS,EAAC,mBAAvC;AAAA,kCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,YAAA,IAAI,EAAC,IAAnB;AAAwB,YAAA,IAAI,EAAC,UAA7B;AAAwC,YAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWE,QAA1D;AAAoE,YAAA,QAAQ,EAAGE,CAAD,IAAO,KAAKO,oBAAL,CAA0BP,CAA1B;AAArF;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdhB,eAmBA;AAAA;AAAA;AAAA;AAAA,gBAnBA,eAoBgB,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBhB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA,oBADE;AA6BD;;AAlE6B;;AAqE9B,SAASqB,kBAAT,CAA4BC,QAA5B,EAAqC;AACjC,SAAO;AACDjC,IAAAA,SAAS,EAAE,CAACkC,EAAD,EAAKC,EAAL,KAAYF,QAAQ,CAACjC,SAAS,CAACkC,EAAD,EAAKC,EAAL,CAAV,CAD9B;AAED9B,IAAAA,eAAe,EAAG+B,KAAD,IAAWH,QAAQ,CAAC5B,eAAe,CAAC+B,KAAD,CAAhB;AAFnC,GAAP;AAID,C,CACH;;;AACE,SAASC,QAAT,CAAkBC,YAAlB,EAA+B;AAC7B,SAAO;AACHF,IAAAA,KAAK,EAAEE,YAAY,CAACC,IAAb,CAAkBH,KADtB;AAEHd,IAAAA,MAAM,EAAEgB,YAAY,CAAChB,MAAb,CAAoBA;AAFzB,GAAP;AAID;;AAEH,eAAevB,OAAO,CAACsC,QAAD,EAAWL,kBAAX,CAAP,CAAsC1B,KAAtC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from \"react-redux\"\nimport { fetchUser } from '../actions/fetchUser';\nimport  { Redirect } from 'react-router-dom'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Navbar from \"../components/Navbar\"\nimport fetchActivities from '../actions/fetchActivities';\n\n\nclass Login extends Component {\n    state = {\n        username: '',\n        password: ''\n    }\n\n  handleOnLogin = (e) => {\n    e.preventDefault()\n    this.props.fetchUser(this.state.username, this.state.password)\n    this.setState({\n        username: '',\n        password: ''\n    }) \n  }  \n\n  handleUsernameChange = (e) => {\n      this.setState({\n          username: e.target.value,\n          password: this.state.password\n      })\n  }\n\n  handlePasswordChange = (e) => {\n    this.setState({\n        username: this.state.username,\n        password: e.target.value\n    })\n  }\n\n//logic here is that when I login, the page re-renders because of change to store. After that, I will have user data but nothing else, in which case I should fetch the other data. If, however, I go to the login page\nrender() { \n  if (!!sessionStorage.getItem('token') && this.props.scores.length === 0) {\n    this.props.fetchActivities(sessionStorage.getItem('token'))\n    return <Redirect push to={`/users/${sessionStorage.getItem('username')}`}/>\n  }else if(!!sessionStorage.getItem('token') && this.props.scores.length > 0){\n    return <Redirect push to={`/users/${sessionStorage.getItem('username')}`}/>\n  }\n  return (\n<>\n<Navbar/>\n<Form  onSubmit={(e) => this.handleOnLogin(e)}\n  style={{\n        backgroundColor: 'white',\n        borderWidth: '5px',\n        borderColor:'#aaaaaa', \n        borderStyle:'solid',\n        position: 'absolute', left: '50%', top: '30%',\n        transform: 'translate(-50%, -50%)'\n      }}  className=\"LogIn\">\n                <Form.Group className=\"mb-3\" controlId=\"formBasicUsername\">\n                    <Form.Label>Username   </Form.Label>\n                    <Form.Control size=\"lg\"  value={this.state.username} onChange={(e) => this.handleUsernameChange(e)}/>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                    <Form.Label>Password   </Form.Label>\n                    <Form.Control size=\"lg\" type=\"password\" value={this.state.password} onChange={(e) => this.handlePasswordChange(e)} />\n                </Form.Group>\n\n<br/>\n                <Button variant=\"primary\" type=\"submit\">\n                    Log In\n                </Button>\n            </Form>\n</>\n  );\n}\n}\n\nfunction mapDispatchToProps(dispatch){\n    return { \n          fetchUser: (UN, PW) => dispatch(fetchUser(UN, PW)),\n          fetchActivities: (token) => dispatch(fetchActivities(token))\n    }\n  }\n//Left token in there so that page re-renders to redirect\n  function mapState(currentState){\n    return { \n        token: currentState.user.token,\n        scores: currentState.scores.scores\n        }\n  }\n  \nexport default connect(mapState, mapDispatchToProps)(Login);"]},"metadata":{},"sourceType":"module"}