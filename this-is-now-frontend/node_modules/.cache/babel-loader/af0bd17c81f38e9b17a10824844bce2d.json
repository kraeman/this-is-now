{"ast":null,"code":"import { addActivity, getReadyToAddActivity, storeScores, error } from \"./index\";\nexport function createNewActivityPost(name, description, valuesAndScores, token) {\n  return dispatch => {\n    dispatch(getReadyToAddActivity());\n    fetch('http://localhost:3000/activities', {\n      method: 'POST',\n      headers: {\n        accept: 'application/json',\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": 'application/json'\n      },\n      body: JSON.stringify({\n        activity: {\n          name,\n          description,\n          valuesAndScores,\n          token\n        }\n      })\n    }).then(response => response.json()).then(data => {\n      if (!!data.message) {\n        dispatch(error(data.message));\n      } else {\n        dispatch(addActivity(data));\n        dispatch(storeScores(data.scores.data));\n      }\n    }).catch(err => {\n      dispatch(error(err));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/kraewind/Documents/Flatiron/Phase 5/this-is-now/this-is-now-frontend/src/actions/createNewActivity.js"],"names":["addActivity","getReadyToAddActivity","storeScores","error","createNewActivityPost","name","description","valuesAndScores","token","dispatch","fetch","method","headers","accept","Authorization","body","JSON","stringify","activity","then","response","json","data","message","scores","catch","err"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,qBAArB,EAA4CC,WAA5C,EAAyDC,KAAzD,QAAqE,SAArE;AAEA,OAAO,SAASC,qBAAT,CAA+BC,IAA/B,EAAqCC,WAArC,EAAkDC,eAAlD,EAAmEC,KAAnE,EAA0E;AAC7E,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACR,qBAAqB,EAAtB,CAAR;AACAS,IAAAA,KAAK,CAAC,kCAAD,EAAqC;AACxCC,MAAAA,MAAM,EAAE,MADgC;AAExCC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAELC,QAAAA,aAAa,EAAG,UAASN,KAAM,EAF1B;AAGL,wBAAgB;AAHX,OAF+B;AAOxCO,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,QAAQ,EAAE;AAACb,UAAAA,IAAD;AAAOC,UAAAA,WAAP;AAAoBC,UAAAA,eAApB;AAAqCC,UAAAA;AAArC;AAAX,OAAf;AAPkC,KAArC,CAAL,CASGW,IATH,CASQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATpB,EAUGF,IAVH,CAUQG,IAAI,IAAI;AACZ,UAAG,CAAC,CAACA,IAAI,CAACC,OAAV,EAAkB;AAChBd,QAAAA,QAAQ,CAACN,KAAK,CAACmB,IAAI,CAACC,OAAN,CAAN,CAAR;AACD,OAFD,MAEK;AACLd,QAAAA,QAAQ,CAACT,WAAW,CAACsB,IAAD,CAAZ,CAAR;AACAb,QAAAA,QAAQ,CAACP,WAAW,CAACoB,IAAI,CAACE,MAAL,CAAYF,IAAb,CAAZ,CAAR;AACD;AAAC,KAhBJ,EAgBMG,KAhBN,CAgBYC,GAAG,IAAI;AACfjB,MAAAA,QAAQ,CAACN,KAAK,CAACuB,GAAD,CAAN,CAAR;AACD,KAlBH;AAoBD,GAtBD;AAuBD","sourcesContent":["import {addActivity, getReadyToAddActivity, storeScores, error} from \"./index\"\n\nexport function createNewActivityPost(name, description, valuesAndScores, token) { \n    return (dispatch) => {\n      dispatch(getReadyToAddActivity());\n      fetch('http://localhost:3000/activities', {\n        method: 'POST',\n        headers: {\n            accept: 'application/json',\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": 'application/json'\n        },\n        body: JSON.stringify({activity: {name, description, valuesAndScores, token}})\n      })\n        .then(response => response.json())\n        .then(data => {\n          if(!!data.message){\n            dispatch(error(data.message))\n          }else{          \n          dispatch(addActivity(data))\n          dispatch(storeScores(data.scores.data))\n        }}).catch(err => {\n          dispatch(error(err))\n        })\n\n    };\n  }\n\n\n \n\n"]},"metadata":{},"sourceType":"module"}