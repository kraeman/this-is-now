{"ast":null,"code":"import { getReadyToRemoveValueFromCurrentUsersValues, removeValueFromCurrentUser, getReadyToDeleteValue, getReadyToDeleteValueFromScores, deleteValue, deleteValueFromScores, error } from \"./index\";\nexport function deleteValueFetch(value, token) {\n  return dispatch => {\n    dispatch(getReadyToDeleteValue());\n    dispatch(getReadyToDeleteValueFromScores());\n    dispatch(getReadyToRemoveValueFromCurrentUsersValues());\n    fetch(`http://localhost:3000/values/${value}`, {\n      method: 'DELETE',\n      headers: {\n        accept: 'application/json',\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      if (!!data.message) {\n        dispatch(error(data.message));\n      } else {\n        const valueIds = JSON.parse(sessionStorage.getItem('value_ids'));\n        const newValueIds = valueIds.filter(vid => vid !== data);\n        sessionStorage.setItem('value_ids', JSON.stringify(newValueIds));\n        dispatch(deleteValue(data));\n        dispatch(deleteValueFromScores(data));\n        dispatch(removeValueFromCurrentUser(data));\n      }\n    }).catch(err => {\n      dispatch(error(err));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/kraewind/Documents/Flatiron/Phase 5/this-is-now/this-is-now-frontend/src/actions/deleteValue.js"],"names":["getReadyToRemoveValueFromCurrentUsersValues","removeValueFromCurrentUser","getReadyToDeleteValue","getReadyToDeleteValueFromScores","deleteValue","deleteValueFromScores","error","deleteValueFetch","value","token","dispatch","fetch","method","headers","accept","Authorization","then","response","json","data","message","valueIds","JSON","parse","sessionStorage","getItem","newValueIds","filter","vid","setItem","stringify","catch","err"],"mappings":"AAAA,SAAQA,2CAAR,EAAqDC,0BAArD,EAAiFC,qBAAjF,EAAwGC,+BAAxG,EAAyIC,WAAzI,EAAsJC,qBAAtJ,EAA6KC,KAA7K,QAAyL,SAAzL;AAEA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwC;AAC3C,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACR,qBAAqB,EAAtB,CAAR;AACAQ,IAAAA,QAAQ,CAACP,+BAA+B,EAAhC,CAAR;AACAO,IAAAA,QAAQ,CAACV,2CAA2C,EAA5C,CAAR;AACAW,IAAAA,KAAK,CAAE,gCAA+BH,KAAM,EAAvC,EAA0C;AAC7CI,MAAAA,MAAM,EAAE,QADqC;AAE7CC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAELC,QAAAA,aAAa,EAAG,UAASN,KAAM,EAF1B;AAGL,wBAAgB;AAHX;AAFoC,KAA1C,CAAL,CAQGO,IARH,CAQQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARpB,EASGF,IATH,CASQG,IAAI,IAAI;AACZ,UAAG,CAAC,CAACA,IAAI,CAACC,OAAV,EAAkB;AAChBV,QAAAA,QAAQ,CAACJ,KAAK,CAACa,IAAI,CAACC,OAAN,CAAN,CAAR;AACD,OAFD,MAEK;AACL,cAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,WAAvB,CAAX,CAAjB;AACA,cAAMC,WAAW,GAAGL,QAAQ,CAACM,MAAT,CAAgBC,GAAG,IAAIA,GAAG,KAAKT,IAA/B,CAApB;AACAK,QAAAA,cAAc,CAACK,OAAf,CAAuB,WAAvB,EAAoCP,IAAI,CAACQ,SAAL,CAAeJ,WAAf,CAApC;AACAhB,QAAAA,QAAQ,CAACN,WAAW,CAACe,IAAD,CAAZ,CAAR;AACAT,QAAAA,QAAQ,CAACL,qBAAqB,CAACc,IAAD,CAAtB,CAAR;AACAT,QAAAA,QAAQ,CAACT,0BAA0B,CAACkB,IAAD,CAA3B,CAAR;AACD;AAAC,KAnBJ,EAmBMY,KAnBN,CAmBYC,GAAG,IAAI;AACftB,MAAAA,QAAQ,CAACJ,KAAK,CAAC0B,GAAD,CAAN,CAAR;AACD,KArBH;AAuBD,GA3BD;AA4BD","sourcesContent":["import {getReadyToRemoveValueFromCurrentUsersValues, removeValueFromCurrentUser, getReadyToDeleteValue, getReadyToDeleteValueFromScores, deleteValue, deleteValueFromScores, error} from \"./index\"\n\nexport function deleteValueFetch(value, token) {\n    return (dispatch) => {\n      dispatch(getReadyToDeleteValue());\n      dispatch(getReadyToDeleteValueFromScores())\n      dispatch(getReadyToRemoveValueFromCurrentUsersValues())\n      fetch(`http://localhost:3000/values/${value}`, {\n        method: 'DELETE',\n        headers: {\n            accept: 'application/json',\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": 'application/json'\n        }\n      })\n        .then(response => response.json())\n        .then(data => {\n          if(!!data.message){\n            dispatch(error(data.message))\n          }else{\n          const valueIds = JSON.parse(sessionStorage.getItem('value_ids'))\n          const newValueIds = valueIds.filter(vid => vid !== data)\n          sessionStorage.setItem('value_ids', JSON.stringify(newValueIds))\n          dispatch(deleteValue(data))\n          dispatch(deleteValueFromScores(data))\n          dispatch(removeValueFromCurrentUser(data))\n        }}).catch(err => {\n          dispatch(error(err))\n        })\n\n    };\n  }"]},"metadata":{},"sourceType":"module"}