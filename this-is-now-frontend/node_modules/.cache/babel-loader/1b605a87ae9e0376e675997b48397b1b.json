{"ast":null,"code":"import { addValue, getReadyToAddValue, error } from \"./index\";\nexport function createNewValuePost(name, creator_id, token) {\n  return dispatch => {\n    dispatch(getReadyToAddValue());\n    fetch('http://localhost:3000/values', {\n      method: 'POST',\n      headers: {\n        accept: 'application/json',\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": 'application/json'\n      },\n      body: JSON.stringify({\n        value: {\n          name,\n          creator_id\n        }\n      })\n    }).then(response => response.json()).then(data => {\n      if (!!data.message) {\n        dispatch(error(data.message));\n      } else {\n        dispatch(addValue(data));\n      }\n    }).catch(err => {\n      dispatch(error(err));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/kraewind/Documents/Flatiron/Phase 5/this-is-now/this-is-now-frontend/src/actions/createNewValue.js"],"names":["addValue","getReadyToAddValue","error","createNewValuePost","name","creator_id","token","dispatch","fetch","method","headers","accept","Authorization","body","JSON","stringify","value","then","response","json","data","message","catch","err"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,kBAAlB,EAAsCC,KAAtC,QAAkD,SAAlD;AAEA,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,UAAlC,EAA8CC,KAA9C,EAAqD;AACxD,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACN,kBAAkB,EAAnB,CAAR;AACAO,IAAAA,KAAK,CAAC,8BAAD,EAAiC;AACpCC,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAELC,QAAAA,aAAa,EAAG,UAASN,KAAM,EAF1B;AAGL,wBAAgB;AAHX,OAF2B;AAOpCO,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,KAAK,EAAE;AAACZ,UAAAA,IAAD;AAAOC,UAAAA;AAAP;AAAR,OAAf;AAP8B,KAAjC,CAAL,CASGY,IATH,CASQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATpB,EAUGF,IAVH,CAUQG,IAAI,IAAI;AACZ,UAAG,CAAC,CAACA,IAAI,CAACC,OAAV,EAAkB;AAChBd,QAAAA,QAAQ,CAACL,KAAK,CAACkB,IAAI,CAACC,OAAN,CAAN,CAAR;AACD,OAFD,MAEK;AACLd,QAAAA,QAAQ,CAACP,QAAQ,CAACoB,IAAD,CAAT,CAAR;AACD;AAAC,KAfJ,EAeME,KAfN,CAeYC,GAAG,IAAI;AACfhB,MAAAA,QAAQ,CAACL,KAAK,CAACqB,GAAD,CAAN,CAAR;AACD,KAjBH;AAmBD,GArBD;AAsBD","sourcesContent":["import {addValue, getReadyToAddValue, error} from \"./index\"\n\nexport function createNewValuePost(name, creator_id, token) {\n    return (dispatch) => {\n      dispatch(getReadyToAddValue());\n      fetch('http://localhost:3000/values', {\n        method: 'POST',\n        headers: {\n            accept: 'application/json',\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": 'application/json'\n        },\n        body: JSON.stringify({value: {name, creator_id}})\n      })\n        .then(response => response.json())\n        .then(data => {\n          if(!!data.message){\n            dispatch(error(data.message))\n          }else{\n          dispatch(addValue(data))\n        }}).catch(err => {\n          dispatch(error(err))\n        })\n\n    };\n  }"]},"metadata":{},"sourceType":"module"}