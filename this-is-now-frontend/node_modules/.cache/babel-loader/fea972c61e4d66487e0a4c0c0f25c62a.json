{"ast":null,"code":"import { updateCurrentUsersValues, getReadyToUpdateCurrentUsersValues, error } from \"./index\";\nexport function updateUsersValues(value, userId, token) {\n  return dispatch => {\n    dispatch(getReadyToUpdateCurrentUsersValues());\n    fetch(`http://localhost:3000/users/${parseInt(userId)}`, {\n      method: 'POST',\n      headers: {\n        accept: 'application/json',\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": 'application/json'\n      },\n      body: JSON.stringify({\n        value: {\n          value\n        }\n      })\n    }).then(response => response.json()).then(data => {\n      if (!!data.message) {\n        dispatch(error(data.message));\n      } else {\n        sessionStorage.setItem('value_ids', JSON.stringify(data));\n        dispatch(updateCurrentUsersValues(data));\n      }\n    }).catch(err => {\n      dispatch(error(err));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/kraewind/Documents/Flatiron/Phase 5/this-is-now/this-is-now-frontend/src/actions/updateUsersValues.js"],"names":["updateCurrentUsersValues","getReadyToUpdateCurrentUsersValues","error","updateUsersValues","value","userId","token","dispatch","fetch","parseInt","method","headers","accept","Authorization","body","JSON","stringify","then","response","json","data","message","sessionStorage","setItem","catch","err"],"mappings":"AAAA,SAAQA,wBAAR,EAAkCC,kCAAlC,EAAsEC,KAAtE,QAAkF,SAAlF;AAEA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiD;AAEpD,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACN,kCAAkC,EAAnC,CAAR;AACAO,IAAAA,KAAK,CAAE,+BAA8BC,QAAQ,CAACJ,MAAD,CAAS,EAAjD,EAAoD;AACvDK,MAAAA,MAAM,EAAE,MAD+C;AAEvDC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAELC,QAAAA,aAAa,EAAG,UAASP,KAAM,EAF1B;AAGL,wBAAgB;AAHX,OAF8C;AAOvDQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACZ,QAAAA,KAAK,EAAE;AAACA,UAAAA;AAAD;AAAR,OAAf;AAPiD,KAApD,CAAL,CASGa,IATH,CASQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATpB,EAUGF,IAVH,CAUQG,IAAI,IAAI;AACZ,UAAG,CAAC,CAACA,IAAI,CAACC,OAAV,EAAkB;AAChBd,QAAAA,QAAQ,CAACL,KAAK,CAACkB,IAAI,CAACC,OAAN,CAAN,CAAR;AACD,OAFD,MAEK;AACHC,QAAAA,cAAc,CAACC,OAAf,CAAuB,WAAvB,EAAoCR,IAAI,CAACC,SAAL,CAAeI,IAAf,CAApC;AACAb,QAAAA,QAAQ,CAACP,wBAAwB,CAACoB,IAAD,CAAzB,CAAR;AACH;AACA,KAjBH,EAiBKI,KAjBL,CAiBWC,GAAG,IAAI;AACdlB,MAAAA,QAAQ,CAACL,KAAK,CAACuB,GAAD,CAAN,CAAR;AACD,KAnBH;AAoBD,GAtBD;AAuBD","sourcesContent":["import {updateCurrentUsersValues, getReadyToUpdateCurrentUsersValues, error} from \"./index\"\n\nexport function updateUsersValues(value, userId, token) {\n  \n    return (dispatch) => {\n      dispatch(getReadyToUpdateCurrentUsersValues());\n      fetch(`http://localhost:3000/users/${parseInt(userId)}`, {\n        method: 'POST',\n        headers: {\n            accept: 'application/json',\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": 'application/json'\n        },\n        body: JSON.stringify({value: {value}})\n      })\n        .then(response => response.json())\n        .then(data => {\n          if(!!data.message){\n            dispatch(error(data.message))\n          }else{\n            sessionStorage.setItem('value_ids', JSON.stringify(data))\n            dispatch(updateCurrentUsersValues(data))\n        }\n        }).catch(err => {\n          dispatch(error(err))\n        })\n    };\n  }"]},"metadata":{},"sourceType":"module"}